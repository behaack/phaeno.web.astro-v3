---
import { getCollection } from 'astro:content';
import { FaCaretRight } from 'react-icons/fa6';
import TopPageBanner from '@/components/TopPageBanner-2.astro';
import Layout from '@/layouts/Layout.astro';
import SEOMeta from '@/components/meta-data-helpers/SEOMeta.astro';
const jobs = await getCollection('jobs');
const isJobs = (jobs.length > 0)
---
<Layout>
  <SEOMeta 
    slot="head"
    title="Job Openings | Phaeno"
    description="Join Phaeno and help shape the future of RNA sequencing. See current job openings and learn about our culture."
    documentType="List"
  />
  <main id="main" tabindex="-1">
    <TopPageBanner title="Job Openings" />
    <section>
      <p>
        We believe great science starts with great people. At Phaeno, we foster a collaborative and inclusive environment where innovation thrives.
      </p>
      <p>
        Our team includes leading experts in chemistry, bioinformatics, and diagnostics — all working together to push the boundaries of RNA technology.
      </p>
      <p>
        Join us and be part of a mission-driven company that’s helping shape the future of precision medicine.
      </p>      

      {(isJobs)
      ? (
          <div class="mt-12 mb-2 flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
            <input
              id="jobSearch"
              type="text"
              placeholder="Search jobs..."
              class="w-full sm:w-2/3 px-4 py-2 rounded-md text-black"
              oninput="filterJobs()"
            />

            <label for="jobType" class="sr-only">Job type</label>
            <select 
              id="jobType" 
              class="w-full sm:w-1/3 px-4 py-2 rounded-md text-black" 
              name="jobType"
              aria-label="Job type"          
              onchange="filterJobs()"
            >
              <option value="">All Types</option>
              <option value="Full-time">Full-time</option>
              <option value="Part-time">Part-time</option>
              <option value="Contract">Contract</option>
              <option value="Temporary">Temporary</option>
              <option value="Intern">Intern</option>
              <option value="Other">Other</option>
            </select>    
          </div>
          <div class="mt-2 mb-6 gap-2 flex items-center">
            <div class="pl-1 text-gray-600">Location: </div>
            <div class="flex gap-9 items-center">
              <label class="inline-flex items-center gap-1">
                <input 
                  type="checkbox"
                  id="filterRemote"
                  value="Remote"
                  checked
                  onchange="filterJobs()" 
                />
                  <span>Remote</span>
              </label>
      
              <label class="inline-flex items-center gap-1">
                <input 
                  type="checkbox"
                  id="filterOnsite"
                  value="On-Site"
                  checked
                  onchange="filterJobs()" 
                />
                  <span>On-Site</span>
              </label>
            </div>       
          </div>                  
        ) 
        : (
          <div class="text-center pt-10">
            <p id="msgEmpty" class="text-gray-600 italic">Sorry, we don't have any job openings right now.<br/>Check back soon.</p>
          </div>
        )
      }

      <ul 
        id="jobList"
        class="ml-0" 
      >
        {jobs.map(job => (
          <li 
            class="job-card"
            data-search={`${job.data.title}`.toLowerCase()}
            data-title={job.data.title.toLowerCase()} 
            data-type={job.data.employmentType}
            data-location={job.data.locationType}
          > 
            <div class="flex items-center gap-4 ml-[-1rem]">
              <div style="color: #7F943A;"><FaCaretRight size={50}/></div>
              <div>                
                <a class="list-alternative" href={`/about/job-openings/${job.slug}`}>{job.data.id} - {job.data.title}</a>
                <p class="text-sm text-gray-600 p-0 m-0 mb-0.5">{job.data.employmentType} • {job.data.locationType} • {job.data.locationDescription}</p>
                <p class="text-sm text-gray-600 p-0 m-0 mb-0.5">{job.data.summary}</p>
                <p class="text-sm text-gray-600 p-0 m-0">Posted on {new Date(job.data.date).toLocaleDateString('en-US')}</p>
              </div>
            </div>       
          </li>
        ))}
      </ul>
      <div class="text-center">
        <p id="msgEmpty"   class="text-gray-600 italic" hidden>Sorry, we don't have any job openings right now.<br/>Check back soon.</p>
        {(isJobs) && <p id="msgNoMatch" class="text-gray-600 italic" hidden>No jobs match your criteria.</p>}
      </div>
      <br />     
    </section>
  </main>
</Layout>

<style>
ul {
  list-style: none;
}

li {
  padding: 10px 0;
  border-bottom: 1px rgba(128, 128, 128, 0.123) solid; 
}

ul li:last-child {
  border-bottom: none;
}

a {
  font-size: 1.5rem;
}

.sr-only {
  position:absolute; width:1px; height:1px; padding:0; margin:-1px;
  overflow:hidden; clip:rect(0,0,0,0); white-space:nowrap; border:0;
}

.job-card[hidden] { display:none; }  
</style>

<script is:inline>
  function filterJobs () {
    const search      = document.getElementById('jobSearch').value.trim().toLowerCase();
    const typeFilter  = document.getElementById('jobType').value;
    const remoteOn    = document.getElementById('filterRemote').checked;
    const onsiteOn    = document.getElementById('filterOnsite').checked;

    const jobs        = document.querySelectorAll('.job-card');
    let visibleCount  = 0;

    jobs.forEach(job => {
      const title     = job.dataset.title;
      const jobType   = job.dataset.type;
      const location  = job.dataset.location;

      const matchesSearch   = !search     || title.includes(search);
      const matchesType     = !typeFilter || jobType === typeFilter;
      let matchesLocation;
      if (!remoteOn && !onsiteOn) {
        // neither box ticked → show nothing
        matchesLocation = false;
      } else {
        matchesLocation =
          (remoteOn  && location === 'Remote') ||
          (onsiteOn  && location === 'On-Site');
      }

      const show = matchesSearch && matchesType && matchesLocation;
      job.hidden = !show;
      if (show) visibleCount++;
    });

    // message logic
    const msgEmpty   = document.getElementById('msgEmpty');
    const msgNoMatch = document.getElementById('msgNoMatch');

    msgEmpty.hidden   = jobs.length !== 0;          // build-time empty list
    msgNoMatch.hidden = visibleCount !== 0;         // filter hides everything
  }

  // run once on load so messages are correct even before the user types
  window.addEventListener('DOMContentLoaded', filterJobs);
</script>