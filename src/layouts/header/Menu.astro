---
import type { IMenuItem } from './menu-versions/full-menu';

interface IProps {
  menuItems: IMenuItem[]
  currentPath: string
}

const { menuItems, currentPath } = Astro.props as IProps;
const path = currentPath.endsWith("/") ? currentPath.slice(0, -1) : currentPath;
const rootParts = path.split('/').filter(item => item !== '');
const rootPath = path.substring(0, path.lastIndexOf("/"));
const subRootPath = rootPath.substring(0, rootPath.lastIndexOf("/"));

let parentPath = ''
let subPath = ''
switch (rootParts.length) {
  case 0:
    parentPath = '/';
    break;
  case 1:
    parentPath = path;
    break;
  case 2:
    parentPath = rootPath;
    subPath = path;
    break;
  case 3:
    parentPath = subRootPath;
    subPath = rootPath;
    break;
  default:
    break;
}
---

<nav 
  id="nav" 
  aria-label="Main navigation"
>
  <ul
    id="main-menu" 
    role="menubar"
    class="main-menu" 
    hidden
    aria-orientation="horizontal"
    aria-label="Main menu"
  >
    {menuItems.map(item => (
      <li
        class={`
          menu-item
          ${item.submenu ? 'main-menu-parent' : ''}
        `}
        role="none"        
      >
        {item.submenu ? (
          <a
            href="#"
            id={`parent-${item.path.replace(/\W+/g, '-')}`}
            role="menuitem"
            data-toggle="sub-menu"
            class={parentPath === item.path ? 'active-parent' : ''}
            aria-haspopup="true"
            aria-expanded="false"
          >
            <span class="main-menu-label">{item.label}</span>
          </a>
        ) : (
          <a
            href={item.path}
            role="menuitem"
            class={parentPath === item.path ? 'active' : ''}
          >
            <span class="main-menu-label">{item.label}</span>
          </a>
        )}

        {item.submenu && (
          <ul 
            class="sub-menu" 
            role="menu"
            aria-labelledby={`parent-${item.path.replace(/\W+/g, '-')}`}
          >
            {item.submenu.map(sub => (
              <li role="none">
                <a
                  href={sub.path ?? '#'}
                  role="menuitem"
                  class={subPath === sub.path ? ((rootParts.length === 2) ? 'active' : 'active-parent') : ''}
                  tabindex={-1}
                >
                  <span class="sub-menu-label">{sub.label}</span>
                </a>
              </li>
            ))}
          </ul>
        )}
      </li>
    ))}
  </ul>
</nav>

<style>
.main-menu {
  margin: 0;
  padding: 0;
  list-style: none;
  display: flex;
  flex-direction: row;
  gap: 0;
}

.menu-item {
  padding: 0;
  position: relative;                             /* Needed for submenu positioning */
}

.menu-item > a {  
  display: block;                                 /* expands to <li> width */
  padding: 1.75rem .65rem;
  text-decoration: none;                          /* no underlines */
  background-color: var(--menu-bgcolor);
  color: var(--menu-color);
  outline: none;                                  /* suppress default ring  */
  border-radius: 0;
}

.main-menu-label {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0 0.5rem;
  border-radius: 4px;
  width: 100%;
}

.menu-item > a.active {
  background: var(--menu-selected-bgcolor); 
  color: var(--menu-selected-color);
}

.menu-item > a.active-parent {
  background: var(--menu-child-selected-bgcolor); 
  color: var(--menu-child-selected-color);
}

.menu-item > a:focus-visible .main-menu-label {
  outline: 1px solid var(--focus-ring-color);
  outline-offset: 2px;
}

.menu-item:focus-within { color: var(--menu-focus-color); background-color: var(--menu-focus-bgcolor); }
.menu-item > a:hover { color: var(--menu-hover-color); background-color: var(--menu-hover-bgcolor); }
.menu-item > a:active { color: var(--menu-active-color); background-color: var(--menu-active-bgcolor); }
.menu-item > a.active:hover { color: var(--menu-selected-color); background-color: var(--menu-selected-bgcolor); }
.menu-item > a.active:active { color: var(--menu-selected-color); background-color: var(--menu-selected-bgcolor); }
.menu-item > a.active-parent:hover { color: var(--menu-child-selected-color); background-color: var(--menu-hover-bgcolor); }
.menu-item > a.active-parent:active { color: var(--menu-child-selected-color); background-color: var(--menu-active-bgcolor); }

/* --- Menu Menu Parent Item Settings --- */
.main-menu-parent > a > .main-menu-label::after {
  content: 'â–¸';
  font-size: 1rem;
  margin-left: 0.5rem; /* optional, adjust spacing from label */
  margin-right: 0;     /* optional, can be omitted */
  flex-shrink: 0;      /* prevents squishing on narrow viewports */
  transition: transform 0.3s ease;
}

/* Arrow rotation on open or hover */
.menu-item.main-menu-parent.open > a > .main-menu-label::after 
{ 
  transform: rotate(90deg); 
}

/* --- Sub-Menu Settings --- */
.sub-menu {
  position: absolute;
  top: calc(100%);
  left: 0;
  background: var(--submenu-bgcolor);
  color: var(--submenu-color);
  border: var(--submenu-border);
  /* border-top: none; */
  list-style: none;
  padding: 0;
  margin: 0;
  z-index: 999;
  min-width: 11.5rem;
  max-height: 0;
  opacity: 0;
  overflow: hidden;
  pointer-events: none;
  gap: 0;
  font-size: smaller;
  transition:
    opacity 0.3s ease,
    max-height 0.4s ease;
}

.sub-menu li a {
  display: block;
  padding: 0.75rem 1rem;
  color: black;
  text-decoration: none;
  border-top: var(--submenu-divider); 
  outline: none; /* suppress default ring  */  
  border-radius: 0;
}

/* First submenu item only */
.sub-menu li:first-child > a {
  /* example: remove the top divider */
  border-top: none;
}

.sub-menu-label {
  display: inline-block;    /* lets outline fit tight */
  padding: 0 .25rem;        /* micro-padding inside   */
  border-radius: 4px;       /* rounded outline (opt.) */
  width: 100%;
}

.sub-menu > li a.active {
  background: var(--submenu-selected-bgcolor); 
  color: var(--submenu-selected-color);
}

.sub-menu > li a:focus-visible .sub-menu-label {
  outline: 1px solid var(--focus-ring-color);
  outline-offset: 2px;
}

.sub-menu > li:focus-within { color: var(--submenu-focus-color); background-color: var(--submenu-focus-bgcolor); }
.sub-menu > li a:hover { color: var(--submenu-hover-color); background-color: var(--submenu-hover-bgcolor); }
.sub-menu > li a:active { color: var(--submenu-active-color); background-color: var(--submenu-active-bgcolor); }
.sub-menu > li a.active:hover { color: var(--submenu-selected-color); background-color: var(--submenu-selected-bgcolor); }
.sub-menu > li a.active:active { color: var(--submenu-selected-color); background-color: var(--submenu-selected-bgcolor); }

@media (min-width: 726px) {
  .menu-item.main-menu-parent:hover > a > .main-menu-label::after,
  .menu-item.main-menu-parent.open > a > .main-menu-label::after {
    transform: rotate(90deg);
  }
  
  .menu-item.open > .sub-menu,
  .menu-item:hover > .sub-menu {
    max-height: 500px; /* large enough to fit your longest submenu */
    opacity: 1;
    pointer-events: auto;
  }
}

@media (max-width: 725px) {
  #nav {
    position: relative;
  }

  #nav.open > .main-menu { display: block; }

  .main-menu {
    display: none;
    position: absolute;
    top: calc(100% + 1.68rem);
    right: 0;
    background-color: var(--mobile-menu-bgcolor);
    border: var(--mobile-menu-border);
    min-width: 210px;
    margin: 0;
    padding: 0;
    z-index: 999;    
  }

  .sub-menu {
    position: static;
    border: none;
  }

  .menu-item > a {  
    padding: 1rem .75rem;
    border-bottom: var(--mobile-menu-divider);
  }
  
  .sub-menu li:last-child > a {  
    border-bottom: var(--mobile-menu-divider);
  }  
  
  .menu-item.open > .sub-menu {
    max-height: 500px;
    opacity: 1;
    pointer-events: auto;
  }
  
  .menu-item.main-menu-parent.open  > a::after { transform: rotate(90deg); }
}

@media (prefers-reduced-motion: no-preference) {
  .sub-menu {
    transition: opacity .3s ease, max-height .4s ease;
  }
}
</style>
